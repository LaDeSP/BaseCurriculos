<template>
<v-row align="center" justify="center" class="mb-12" v-if="isLoaded">
  <v-col cols="12" lg="12" md="12" sm="12">
    <template v-if="$route.path != '/dashboard' || $route.path != '/dashboard/'">
       <router-link to="/vagas">
        <v-btn class="mr-2">
          <v-icon class="pr-1">mdi-arrow-left-circle</v-icon> Voltar
        </v-btn>
      </router-link>
      <router-link to="/dashboard">
        <v-btn>
          <v-icon class="pr-1">fas fa-home fa-lg</v-icon> Home
        </v-btn>
      </router-link>
    </template>
      <v-card>
        <v-card-title class="justify-center text-center"><h1>{{title}}</h1></v-card-title>
        <v-stepper v-model="step">
        <v-stepper-header>
          <v-divider></v-divider>
          <v-stepper-step :complete="step > 1" editable step="1">Informações da Vaga</v-stepper-step>
              <v-divider></v-divider>
          <v-stepper-step :complete="step > 2" editable step="2">Detalhes da Vaga</v-stepper-step>
              <v-divider></v-divider>
        </v-stepper-header>
        <form>
          <ValidationObserver ref="observer" v-slot="{ invalid }">
          <v-stepper-items>
            <v-card flat class="mb-12" color="white darken-1" align="center">
              <template v-if="notificacoes">
                <span class="rounded-lg pa-1 mr-1 mt-3 mb-10 text-center red lighten-2 white--text" v-for="(notificacao, index) in notificacoes" :key="index">
                  {{notificacao[0]}}
                </span>
              </template>
              <InformacoesVaga :edicao="edicao" @handlePayload="getPayloadInfoVaga" @handleStep="getStep"></InformacoesVaga>
              <template>
                <v-stepper-content step="2">
                  <v-card-text>
                      <v-icon size="45" class="mb-4">fas fa-list-ul</v-icon>
                      <ValidationProvider v-slot="{ errors }" name="jornada" rules="required|max:250">
                        <v-text-field
                          v-model="jornada"
                          :error-messages="errors"
                          label="Jornada de Trabalho *"
                          required
                          maxlength="250"
                        ></v-text-field>
                      </ValidationProvider>
                      <ValidationProvider v-slot="{ errors }" name="beneficios" rules="required|max:5000">
                        <v-textarea
                          class="mt-3"
                          name="Benefícios"
                          label="Benefícios *"
                          :error-messages="errors"
                          maxlength="5000"
                          v-model="beneficios"
                          outlined
                        ></v-textarea>
                      </ValidationProvider>
                      <ValidationProvider v-slot="{ errors }" name="requisitos" rules="required|max:5000">
                        <v-textarea
                          class="mt-3"
                          name="Requisitos"
                          label="Requisitos *"
                          :error-messages="errors"
                          v-model="requisitos"
                          outlined
                        ></v-textarea>
                      </ValidationProvider>  
                  </v-card-text>
                  <v-card-actions><small class="red--text">* Campo obrigatório</small></v-card-actions>
                  <v-btn color="default" class="mr-3" @click="step = 1">Voltar</v-btn>
                  <v-btn 
                    class="ml-3 mr-3 green white--text" 
                    :loading="pleaseWaitDialog" 
                    :disabled="invalid"
                    @click="submit()"
                  >Salvar</v-btn>
                  <v-dialog
                    v-model="pleaseWaitDialog"
                    hide-overlay
                    persistent
                    width="300"
                  > 
                    <v-card class="grey darken-3 text-center white--text" dark>
                      <v-card-text>Por favor, aguarde...
                        <v-progress-linear
                          indeterminate
                          color="white"
                          class="mb-0"
                        ></v-progress-linear>
                      </v-card-text>
                    </v-card>
                  </v-dialog>
                </v-stepper-content>
              </template>
            </v-card>
          </v-stepper-items>
          </ValidationObserver>
        </form>
      </v-stepper>
      </v-card>
  </v-col> 
</v-row>
</template>

<script>
import { actionTypes } from '../../core/constants'
import {mapGetters} from 'vuex'
import moment from 'moment'
import InformacoesVaga from './FormCreateVagaComponents/InformacoesVaga'

export default {
  components: {InformacoesVaga},
  props: {
    edicao: Boolean
  },
  data(){
    return {
      step: 1,
      title: 'Criar Nova Vaga',
      isLoaded: false,
      pleaseWaitDialog: false,
      aviso: '',
      notificacoes: [],
      vaga: [],
      menu: false,
      titulo: '',
      descricao: '',
      cargo: '',
      quantidade: 0,
      salario: '',
      area: '',
      jornada: '',
      beneficios: '',
      requisitos: '',
      vagaId: 0
    }
  },
  async created(){
    await this.$store.dispatch(actionTypes.GET_AREAS)
      .then(response => {
        this.itemsAreaAtuacao = response.areas
        this.isLoaded = true
      })
    if(this.$route.params.vagaId) this.loadDataToEdit()
  },
  computed: {
    ...mapGetters(['getVagaById']),
    vagaById(){
      return this.getVagaById(this.vagaId)
    }
  },
  methods: {
    getStep(value){
      this.step = value
    },
    getPayloadInfoVaga(value){
      this.titulo = value.titulo
      this.descricao = value.descricao 
      this.cargo = value.cargo 
      this.quantidade = value.quantidade
      this.salario = value.salario
      this.area = value.area
    },
    async submit(){
      this.pleaseWaitDialog = true
      let payload = {
        titulo: this.titulo,
        descricao: this.descricao,
        cargo: this.cargo,
        quantidade: this.quantidade,
        salario: this.salario,
        area: this.area,
        jornada: this.jornada, 
        beneficios: this.beneficios, 
        requisitos: this.requisitos,
        status: 'ATIVA',
        vagaId: this.vagaId
      }
      if(!this.edicao){
        this.$store.dispatch(actionTypes.CREATE_NOVA_VAGA, payload) 
        .then(response =>{
          if(response.error != undefined){
            this.notificacoes = response.error
            this.pleaseWaitDialog = false
          }else{
            this.pleaseWaitDialog = false
            //this.$emit('handleNotifSuccess', 'Vaga criada com sucesso!')
            this.$router.push({ name: 'vagas', params:{cadastroVagaSucesso: true} })
          }
        })
      }else{
        this.$store.dispatch(actionTypes.UPDATE_PESSOA_FISICA, payload)
        .then(response =>{
          if(response.error != undefined){
            this.notificacoes = response.error
            this.pleaseWaitDialog = false
          }else{
            this.pleaseWaitDialog = false
            //this.$router.push({ name: 'dashboard', params:{cadastroCurriculoSucesso: true} })
          }
        })
      }
    },
    loadDataToEdit(){
      this.title = 'Editar Vaga'
      this.vagaId = this.$route.params.vagaId
      this.vaga = this.vagaById[0]
      console.log('vuex ?', this.vagaById)
    }
  }
}
</script>